@page "/product/create"
@using eShop.Repository.Entities
@using eShop.Web.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Create New Product</h3>

<EditForm Model="@newProduct" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Name:</label>
        <InputText @bind-Value="newProduct.Name" class="form-control" />
    </div>
    <div>
        <label>Description:</label>
        <InputText @bind-Value="newProduct.Description" class="form-control" />
    </div>
    <div>
        <label>Price:</label>
        <InputNumber @bind-Value="newProduct.Price" class="form-control" />
    </div>
    <div>
        <label>Stock:</label>
        <InputNumber @bind-Value="newProduct.Stock" class="form-control" />
    </div>

    @if (categories == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div>
            <label>Sub Category:</label>
            <InputSelect @bind-Value="newProduct.SubCategoryId" class="form-control">
                <option value="">-- Select Sub Category --</option>
                @foreach (SubCategory category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
    }

    @if (brands == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div>
            <label>Brand:</label>
            <InputSelect @bind-Value="newProduct.BrandId" class="form-control">
                <option value="">-- Select Brand --</option>
                @foreach (Brand brand in brands)
                {
                    <option value="@brand.Id">@brand.Name</option>
                }
            </InputSelect>
        </div>
    }

    <button type="submit" class="btn btn-primary mt-2">Create Product</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    private ProductCreateRequest newProduct = new ProductCreateRequest();
    private List<Brand> brands;
    private List<SubCategory> categories;
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        brands = await Http.GetFromJsonAsync<List<Brand>>("https://localhost:7192/rest/v1/Brands");
        categories = await Http.GetFromJsonAsync<List<SubCategory>>("https://localhost:7192/rest/v1/SubCategories");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            HttpResponseMessage response = await Http.PostAsJsonAsync("https://localhost:7192/rest/v1/Products", newProduct);
            if (response.IsSuccessStatusCode)
                message = "Product created successfully.";
            else
                message = $"Failed to create product: {response.ReasonPhrase}";
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }
}
